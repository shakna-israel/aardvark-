#ifndef AARDVARK_CORE

#ifdef AARDVARK_SERIAL
#include <util/setbaud.h>
#include <avr/io.h>
#include <stdio.h>

void _uart_init(void) {
  UBRR0H = UBRRH_VALUE;
  UBRR0L = UBRRL_VALUE;
#if USE_2X
  UCSR0A |= _BV(U2X0);
#else
  UCSR0A &= ~(_BV(U2X0));
#endif

  UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
}

void _uart_putchar(char c, FILE* stream) {
  if (c == '\n') _uart_putchar('\r', stream);
  UDR0 = c;
  loop_until_bit_is_set(UCSR0A, TXC0); /* Send transmission when ready */
}

void _uart_putchar_blind(char c, FILE* stream) {
  if (c == '\n') _uart_putchar('\r', stream);
  loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until register ready */
  UDR0 = c;
}

char _uart_getchar(FILE* stream) {
  loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists */
  return UDR0;
}

FILE _uart_out = FDEV_SETUP_STREAM(_uart_putchar, NULL, _FDEV_SETUP_WRITE);;
FILE _uart_in = FDEV_SETUP_STREAM(NULL, _uart_getchar, _FDEV_SETUP_READ);

void init_serial(void) {
  _uart_init();
  stdout = &_uart_out;
  stdin = &_uart_in;
}
#endif

#define AARDVARK_CORE
#endif
